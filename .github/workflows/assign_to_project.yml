import os
import json
import requests

def add_issue_to_project(issue_number, content, token):
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }

    # Mapping keywords to project column IDs
    keyword_to_column_id = {
        'ssf|super speedy filters|super-speedy-filters': 'COLUMN_ID_FOR_SSF',
        'sss|super speedy search|super-speedy-search': 'COLUMN_ID_FOR_SSS',
        # Add more mappings as needed
    }

    # Determine the right column based on keywords
    column_id = None
    for keywords, column_id_value in keyword_to_column_id.items():
        if any(keyword in content.lower() for keyword in keywords.split('|')):
            column_id = column_id_value
            break

    if column_id:
        # Construct the URL for the GitHub API to add an issue to a project column
        url = f'https://api.github.com/projects/columns/{column_id}/cards'

        # Prepare the data payload. The content_id is the issue number
        data = {
            'content_id': issue_number,
            'content_type': 'Issue'
        }

        # Make the API request to add the issue to the project column
        response = requests.post(url, headers=headers, data=json.dumps(data))

        # Check the response
        if response.status_code == 201:
            print("Issue added to project successfully")
        else:
            print(f"Failed to add issue to project: {response.content}")
    else:
        print("No matching keywords found for project assignment.")

# Environment variables
issue_number = int(os.getenv('ISSUE_NUMBER'))  # This should be passed from the workflow
issue_title = os.getenv('ISSUE_TITLE')
issue_body = os.getenv('ISSUE_BODY')
token = os.getenv('GITHUB_TOKEN')  # Your GitHub token

# Combine title and body for keyword search
content = f"{issue_title} {issue_body}"

# Add the issue to the project
add_issue_to_project(issue_number, content, token)
